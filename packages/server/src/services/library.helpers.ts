import { readdir } from "fs/promises";
import path from "path";
import { AlbumId } from "src/types/api-contract";

export const COVER_ART_FILE_NAME = "cover";

/**
 * Given an album id generated by generateAlbumId, creates the URL that this server
 * will serve the album's cover art from
 */
export function generateAlbumCoverArtUrl({ albumId }: { albumId: string }) {
  return `http://${process.env.HOST}/library/album/${encodeURIComponent(albumId)}/${COVER_ART_FILE_NAME}`;
}

export function generateAlbumId({
  albumName,
  artistName,
}: {
  artistName?: string;
  albumName?: string;
}): AlbumId {
  const albumIdDelimiter = "#";
  const prettyArtistName =
    artistName?.replace(albumIdDelimiter, "") || "unknown";
  const prettyAlbumName = albumName?.replace(albumIdDelimiter, "") || "unknown";
  return `album#${prettyAlbumName}#artist#${prettyArtistName}`;
}

export function parseAlbumId(albumId: AlbumId): {
  albumName: string;
  albumArtistName: string;
} {
  const albumIdParts = albumId.split("#");
  return {
    albumName: albumIdParts[1],
    albumArtistName: albumIdParts[3],
  };
}

export function getLocalAlbumPath(albumId: AlbumId): string {
  const { albumName, albumArtistName } = parseAlbumId(albumId);
  return path.join(
    process.env.LIBRARY_ROOT_PATH || "",
    albumArtistName,
    albumName,
  );
}

export async function getLocalAlbumArtPath(
  albumDirectoryPath: string,
): Promise<string | undefined> {
  const fileNames = await readdir(albumDirectoryPath);
  const albumArtFileName = fileNames.find((fileName) =>
    fileName.toLowerCase().match(/^cover.(jpg|jpeg|png)/),
  );
  console.log("getLocalAlbumArtPath 1/2", { fileNames, albumArtFileName });
  if (!albumArtFileName) {
    return;
  }
  const result = path.join(albumDirectoryPath, albumArtFileName);
  console.log("getLocalAlbumArtPath 2/2", { result });
  return result;
}
